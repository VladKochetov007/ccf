verbose: true
delay: 1
remove_pre_features: false
pre_features:
- feature: m_p
  depth: ~
- feature: get
  columns: [ a_p_*, b_p_* ]
post_features:
- feature: relative
  kind: rat
  shift: 1
- feature: relative
  shift: 0
  kind: rat
  columns: [ "o_m_p_[1-9]*", "o_a_p_[1-9]*", "o_b_p_[1-9]*" ]
  column: o_m_p_0
- feature: relative
  shift: 0
  kind: rat
  columns: [ "o_a_p_[1-9]*" ]
  column: o_a_p_0
- feature: relative
  shift: 0
  kind: rat
  columns: [ "o_b_p_[1-9]*" ]
  column: o_b_p_0
resample_kwargs:
  rule: 1S
aggregate_kwargs:
  func: last
interpolate_kwargs:
  func: pad
feature_data_kwargs:
  start: -5
  end: ~
  concat: false
  query:
    feature:
      btcusdt:
        engine_kwargs:
          url: sqlite:///btcusdt@feature.db
        read_kwargs:
          name: data
          columns: ~
        write_kwargs:
          name: data
          if_exists: append
      ethusdt:
        engine_kwargs:
          url: sqlite:///ethusdt@feature.db
        read_kwargs:
          name: data
          columns: ~
        write_kwargs:
          name: data
          if_exists: append
      ethbtc:
        engine_kwargs:
          url: sqlite:///ethbtc@feature.db
        read_kwargs:
          name: data
          columns: ~
        write_kwargs:
          name: data
          if_exists: append
raw_data_kwargs:
  start: -5
  end: ~
  concat: False
  query:
    btcusdt:
      o:
        engine_kwargs:
          url: sqlite:///btcusdt@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: ~
    ethusdt:
      o:
        engine_kwargs:
          url: sqlite:///ethusdt@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: ~
    ethbtc:
      o:
        engine_kwargs:
          url: sqlite:///ethbtc@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: ~
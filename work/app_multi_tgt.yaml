delay: 1
read_data_kwargs:
  start: -30
  end: ~
  query:
    btcusdt:
      target:
        engine_kwargs:
          url: sqlite:///btcusdt@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: [ time, a_p_0, b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      tft:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft@prediction.db
        read_kwargs:
          name: data
          group: btcusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      rnn:
        engine_kwargs:
          url: sqlite:///multi_tgt_rnn@prediction.db
        read_kwargs:
          name: data
          group: btcusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      naive:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft_naive@prediction.db
        read_kwargs:
          name: data
          group: btcusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
    ethusdt:
      target:
        engine_kwargs:
          url: sqlite:///ethusdt@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: [ time, a_p_0, b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      tft:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft@prediction.db
        read_kwargs:
          name: data
          group: ethusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      rnn:
        engine_kwargs:
          url: sqlite:///multi_tgt_rnn@prediction.db
        read_kwargs:
          name: data
          group: ethusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      naive:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft_naive@prediction.db
        read_kwargs:
          name: data
          group: ethusdt
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
    ethbtc:
      target:
        engine_kwargs:
          url: sqlite:///ethbtc@depth5@1000ms.db
        read_kwargs:
          name: data
          columns: [ time, a_p_0, b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      tft:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft@prediction.db
        read_kwargs:
          name: data
          group: ethbtc
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      rnn:
        engine_kwargs:
          url: sqlite:///multi_tgt_rnn@prediction.db
        read_kwargs:
          name: data
          group: ethbtc
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last
      naive:
        engine_kwargs:
          url: sqlite:///multi_tgt_tft_naive@prediction.db
        read_kwargs:
          name: data
          group: ethbtc
          columns: [ time, pred-a_p_0, pred-b_p_0 ]
          resample_kwargs:
            rule: 1S
          aggregate_kwargs:
            func: last